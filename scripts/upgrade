#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_package_version
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
language=$(ynh_app_setting_get --app=$app --key=language)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_pwd=$(ynh_app_setting_get --app=$app --key=mysqlpwd)
random_key=$(ynh_app_setting_get --app=$app --key=random_key)
email=$(ynh_user_get_info --username=$admin --key=mail)
dav_support=$(ynh_app_setting_get --app=$app --key=dav_support)
signup=$(ynh_app_setting_get --app=$app --key=signup)
two_factor=$(ynh_app_setting_get --app=$app --key=two_factor)
version=$(curl -s https://api.github.com/repos/monicahq/monica/releases/latest | grep 'tag_name' | cut -d\" -f4)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# Restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# Create a permission if needed
if ! ynh_permission_exists --permission="api"; then
	ynh_permission_create --permission="api" --url="/api" --allowed="visitors" --show_tile="false" --protected="true"
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app

#=================================================
# CHECK VERSION NUMBER
#=================================================

abort_if_up_to_date
# previous function is what defines 'version', more precisely the 'previous version'
previous_version="${version}"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..."

	# Download, check integrity, uncompress and patch the source from app.src
	if git -C "$final_path" rev-parse --is-inside-work-tree` >/dev/null 2>/dev/null
	then
		pushd "$final_path"
			git fetch
			git checkout tags/$version
		popd
	else
		ynh_setup_source --dest_dir="$final_path"
	fi

fi
ynh_app_setting_set --app=$app --key=version --value=$version

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..."

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..."

ynh_install_app_dependencies $pkg_dependencies

ynh_install_nodejs --nodejs_version=$NODEJS_VERSION
ynh_install_extra_app_dependencies --repo="deb https://dl.yarnpkg.com/debian/ stable main" --package="yarn" --key="https://dl.yarnpkg.com/debian/pubkey.gpg"

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading PHP-FPM configuration..."

# Create a dedicated PHP-FPM config
ynh_add_fpm_config --usage=low --footprint=low --package="$extra_php_dependencies"
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)

#=================================================
# SPECIFIC UPGRADE
#=================================================
# UPDATE PHP DEPENDENCIES
#=================================================
ynh_script_progression --message="Updating PHP dependencies..."

ynh_exec_warn_less ynh_composer_exec --phpversion="$phpversion" --workdir="$final_path" --commands="update"

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a configuration file..."

config="$final_path/.env"

# Enable or disable DAV support for users
if [ $dav_support -eq 0 ]
then
	dav_boolean="false"
	dav="Yes"
else
	dav_boolean="true"
	dav="No"
fi
# Enable or disable signup for public users
if [ $signup -eq 1 ]
then
	sign_boolean="false"
	sign="No"
else
	sign_boolean="true"
	sign="Yes"
fi
# Enable or disable two factor authentication support for  users
if [ $two_factor -eq 1 ]
then
	twof_boolean="true"
	twof="Yes"
else
	twof_boolean="false"
	twof="No"
fi

ynh_add_config --template="../conf/.env" --destination="$config"

#=================================================
# DEPLOYMENT
#=================================================
ynh_script_progression --message="Deploying..."

update-alternatives --set php /usr/bin/php$phpversion

pushd "$final_path"	
	ynh_use_nodejs
	yarn install
	yarn run production
	php$phpversion artisan monica:update --force
popd

if [ -f $final_path/storage/oauth-private.key ]; then
	mobile_id=$(ynh_app_setting_get --app=$app --key=mobile_id)
	mobile_key=$(ynh_app_setting_get --app=$app --key=mobile_key)
	if [ -z $(ynh_app_setting_get --app=$app --key=private_key) ]; then
		private_key=$(sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' $final_path/storage/oauth-private.key)
		public_key=$(sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' $final_path/storage/oauth-public.key)
		ynh_app_setting_set --app=$app --key=private_key --value=$private_key
		ynh_app_setting_set --app=$app --key=private_key --value=$public_key
	fi
	ynh_replace_string --match_string="_IDENTITY_" --replace_string="$mobile_id" --target_file="$config"
	ynh_replace_string --match_string="_KEY_" --replace_string="$mobile_key" --target_file="$config"
else
	pushd "$final_path"
		php$phpversion artisan passport:keys
		php$phpversion artisan passport:client --password -n > key.txt
		mobile_id=$( tail -2 key.txt | head -1 | cut -c 12- )
		mobile_key=$( tail -1 key.txt | cut -c 16- )
		mobile_key=$( cd $final_path && tail -1 key.txt | cut -c 16- )
		private_key=$(sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' storage/oauth-private.key)
		public_key=$(sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' storage/oauth-public.key)
		ynh_replace_string --match_string="_IDENTITY_" --replace_string="$mobile_id"   --target_file="$config"
		ynh_replace_string --match_string="_KEY_" --replace_string="$mobile_key"  --target_file="$config"
		ynh_app_setting_set --app=$app --key=mobile_id --value=$mobile_id
		ynh_app_setting_set --app=$app --key=mobile_key --value=$mobile_key
		ynh_app_setting_set --app=$app --key=private_key --value=$private_key
		ynh_app_setting_set --app=$app --key=private_key --value=$public_key
		rm -f key.txt
		php$phpversion artisan config:clear
	popd
fi

if ynh_version_gt "2.15.0" "${previous_version}" ; then
	ynh_script_progression --message="Upgrading for 2.15.0..."
	pushd "$final_path"
		php$phpversion artisan monica:moveavatarstophotosdirectory
	popd
fi

update-alternatives --set php /usr/bin/php${YNH_DEFAULT_PHP_VERSION}

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================
ynh_script_progression --message="Storing the config file checksum..."

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum --file="$config"

chmod 400 "$config"
chown $app:$app "$config"

#=================================================
# INSTALL THE CRON FILE
#=================================================
ynh_script_progression --message="Installing the cron file..."

echo "* * * * * -u $app /usr/bin/php$phpversion $final_path/artisan schedule:run" > /tmp/cron$app
mv -f /tmp/cron$app /etc/cron.d/$app

#=================================================
# GENERIC FINALIZATION
#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed"
