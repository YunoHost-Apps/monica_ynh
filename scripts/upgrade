#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_composer__2
source ynh_package_version
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
is_public=$(ynh_app_setting_get --app=$app --key=is_public)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
language=$(ynh_app_setting_get --app=$app --key=language)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_pwd=$(ynh_app_setting_get --app=$app --key=mysqlpwd)
random_key=$(ynh_app_setting_get --app=$app --key=random_key)
email=$(ynh_user_get_info --username=$admin --key=mail)
dav_support=$(ynh_app_setting_get --app=$app --key=dav_support)
signup=$(ynh_app_setting_get --app=$app --key=signup)
two_factor=$(ynh_app_setting_get --app=$app --key=two_factor)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

#=================================================
# CHECK VERSION NUMBER
#=================================================

abort_if_up_to_date
# previous function is what defines 'version', more precisely the 'previous version'
previous_version="${version}"

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..."

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..."

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading PHP-FPM configuration..."

# Create a dedicated PHP-FPM config
ynh_add_fpm_config --usage=low --footprint=low --package="$extra_php_dependencies"
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)

#=================================================
# SPECIFIC UPGRADE
#=================================================
# UPDATE PHP DEPENDENCIES
#=================================================
ynh_script_progression --message="Updating PHP dependencies..."

chown -R $app: "$final_path"

ynh_exec_warn_less ynh_composer_exec --phpversion="$phpversion" --workdir="$final_path" --commands="update"

#=================================================
# MODIFY A CONFIG FILE
#=================================================
ynh_script_progression --message="Modifying a config file..."

config="$final_path/.env"
ynh_backup_if_checksum_is_different --file="$config"
cp ../conf/.env "$config"

ynh_replace_string  --match_string="random_key" --replace_string="$random_key" --target_file="$config"
ynh_replace_string  --match_string="yunouser"   --replace_string="$db_name"    --target_file="$config"
ynh_replace_string  --match_string="yunopass"   --replace_string="$db_pwd"     --target_file="$config"
ynh_replace_string  --match_string="yunobase"   --replace_string="$db_name"    --target_file="$config"
ynh_replace_string  --match_string="yunomail"   --replace_string="$email"      --target_file="$config"
ynh_replace_string  --match_string="yunodomain" --replace_string="$domain"     --target_file="$config"
ynh_replace_string  --match_string="language"   --replace_string="$language"   --target_file="$config"
ynh_replace_string  --match_string="__DOMAIN__" --replace_string="$domain"     --target_file="$config"
# Enable or disable DAV support for users
if [ $dav_support -eq 0 ]
then
	ynh_replace_string --match_string="__DAV__" --replace_string="false" --target_file="$config"
else
	ynh_replace_string --match_string="__DAV__" --replace_string="true" --target_file="$config"
	dav_support=1
	ynh_app_setting_set --app=$app --key=dav_support --value=$dav_support
fi
# Enable or disable signup for public users
if [ $signup -eq 1 ]
then
	ynh_replace_string --match_string="__SIGNUP__" --replace_string="false" --target_file="$config"
else
	ynh_replace_string --match_string="__SIGNUP__" --replace_string="true" --target_file="$config"
	signup=0
	ynh_app_setting_set --app=$app --key=signup --value=$signup
fi
# Enable or disable two factor authentication support for  users
if [ $two_factor -eq 1 ]
then
	ynh_replace_string --match_string="__TWO_FACTOR__" --replace_string="true" --target_file="$config"
else
	ynh_replace_string --match_string="__TWO_FACTOR__" --replace_string="false" --target_file="$config"
	two_factor=0
	ynh_app_setting_set --app=$app --key=two_factor --value=$two_factor
fi

#=================================================
# DEPLOYMENT
#=================================================
ynh_script_progression --message="Deploying..."

pushd "$final_path"
	php$phpversion artisan monica:update --force
popd

if [ -f $final_path/storage/oauth-private.key ]; then
	mobile_id=$(ynh_app_setting_get --app=$app --key=mobile_id)
	mobile_key=$(ynh_app_setting_get --app=$app --key=mobile_key)
	if [ -z $(ynh_app_setting_get --app=$app --key=private_key) ]; then
		private_key=$(sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' $final_path/storage/oauth-private.key)
		public_key=$(sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' $final_path/storage/oauth-public.key)
		ynh_app_setting_set --app=$app --key=private_key --value=$private_key
		ynh_app_setting_set --app=$app --key=private_key --value=$public_key
	fi
	ynh_replace_string --match_string="__IDENTITY__" --replace_string="$mobile_id" --target_file="$config"
	ynh_replace_string --match_string="__KEY__" --replace_string="$mobile_key" --target_file="$config"
else
	pushd "$final_path"
		php$phpversion artisan passport:keys
		php$phpversion artisan passport:client --password -n > key.txt
		mobile_id=$( tail -2 key.txt | head -1 | cut -c 12- )
		mobile_key=$( tail -1 key.txt | cut -c 16- )
		mobile_key=$( cd $final_path && tail -1 key.txt | cut -c 16- )
		private_key=$(sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' storage/oauth-private.key)
		public_key=$(sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' storage/oauth-public.key)
		ynh_replace_string --match_string="__IDENTITY__" --replace_string="$mobile_id"   --target_file="$config"
		ynh_replace_string --match_string="__KEY__" --replace_string="$mobile_key"  --target_file="$config"
		ynh_app_setting_set --app=$app --key=mobile_id --value=$mobile_id
		ynh_app_setting_set --app=$app --key=mobile_key --value=$mobile_key
		ynh_app_setting_set --app=$app --key=private_key --value=$private_key
		ynh_app_setting_set --app=$app --key=private_key --value=$public_key
		rm -f key.txt
		php$phpversion artisan config:clear
	popd
fi

if ynh_version_gt "2.15.0" "${previous_version}" ; then
	ynh_script_progression --message="Upgrading for 2.15.0..."
	pushd "$final_path"
		php$phpversion artisan monica:moveavatarstophotosdirectory
	popd
fi

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================
ynh_script_progression --message="Storing the config file checksum..."

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum --file="$config"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_script_progression --message="Securing files and directories..."

# Set permissions on app files
chown -R $app: $final_path
chmod -R 775 "$final_path/storage"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Upgrading SSOwat configuration..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed"
